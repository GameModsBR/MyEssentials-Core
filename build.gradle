buildscript {
    repositories {
	mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
	maven {
	    name = "sonatype"
	    url = "https://oss.sonatype.org/content/repositories/snapshots/"
	}
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    maven {
        name = "bukkit-repo"
        url = "http://repo.bukkit.org/content/groups/public/"
    }
    maven {
        name = "SpongePowered"
        url = "https://repo.spongepowered.org/maven"
    }
    maven {
        name = "sk89q"
        url = "http://maven.sk89q.com/artifactory/repo/"
    }
}

// Load Configs
ext.configFile = file "build.properties"

ext.configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

if (System.env.TRAVIS_TAG != null && !System.env.TRAVIS_TAG.isEmpty()) {
    ext.config.build_number = System.env.TRAVIS_TAG.substring(0, System.env.TRAVIS_TAG.length()-1)
    ext.config.build_type = System.env.TRAVIS_TAG.substring(System.env.TRAVIS_TAG.length()-1)
} else {
    ext.config.build_number = "1.5"
    ext.config.build_type = "r"
}

// Apply Plugins
apply plugin: "curseforge"
apply plugin: "forge"

// Configure Everything
version = "${config.minecraft_version}-${config.build_number}${config.build_type}"
group = config.group
archivesBaseName = config.archivesBaseName

minecraft {
    version = "${config.minecraft_version}-${config.forge_version}"

    replace "@VERSION@", "${project.version}"

    // TODO Didn't work
    //srgExtra "PK: org/spongepowered/asm myessentials/org/spongepowered/asm"
}

// Mixin Configs
ext.mixinSrg = new File(project.buildDir, 'tmp/mixins/mixins.mec.srg')
ext.mixinRefMap = new File(project.buildDir, "tmp/mixins/mixins.mec.refmap.json")

// TODO Uncomment after we have a mixin with that actually requires refmap or make it add only if it exists
//reobf.addExtraSrgFile project.mixinSrg

compileJava {
    options.compilerArgs += [
            '-Xlint:-processing',
            "-AoutSrgFile=${project.mixinSrg.canonicalPath}",
            "-AoutRefMapFile=${project.mixinRefMap.canonicalPath}",
            "-AreobfSrgFile=${project.file('build/srgs/mcp-srg.srg').canonicalPath}"
    ]
}

afterEvaluate {
    tasks.compileJava.options.compilerArgs += "-AreobfSrgFile=${tasks.reobf.srg}"
}

task copySrgs(type: Copy, dependsOn: 'genSrgs') {
    from plugins.getPlugin("forge").delayedFile('{SRG_DIR}')

    include '**/*.srg'
    into 'build/srgs'
}

setupDecompWorkspace.dependsOn copySrgs
setupDevWorkspace.dependsOn copySrgs
compileJava.dependsOn copySrgs

configurations {
    shade
    compile.extendsFrom shade
}

// Setup Deps
dependencies {
    testCompile "junit:junit:4.11"

    // Database engines
    compile "org.xerial:sqlite-jdbc:3.8.5-pre1"
    compile "mysql:mysql-connector-java:5.1.32"

    // Minecraft related deps
    compile "org.bukkit:bukkit:1.7.9-R0.2"
    compile "org.spongepowered:mixin:0.4.4-SNAPSHOT"
    compile "com.sk89q.worldedit:worldedit-forge-mc1.7.10:6.0.2-SNAPSHOT:dev"
    compile "com.forgeessentials:forgeessentials:1.4.1-SNAPSHOT:dev"
    //compile "info.servertools.permission:ServerTools-PERMISSION:1.7.10-2.2.1.14:deobf"

    // Other deps
    compile "org.beanshell:bsh:2.0b5"
    compile "com.esotericsoftware.reflectasm:reflectasm:${config.reflectasm_version}"

    shade("org.spongepowered:mixin:0.4.4-SNAPSHOT"){
        exclude module: 'launchwrapper'
        exclude module: 'guava'
    }
}

// Process Resources, injecting version numbers in
processResources {
    inputs.property "mod_version", project.version
    inputs.property "minecraft_version", project.minecraft.version
    inputs.property "reflectasm_version", config.reflectasm_version
    
    from(sourceSets.main.resources.srcDirs) {
        include '*.info'
        expand 'mod_version': project.version, 'minecraft_version': project.minecraft.version, 'reflectasm_version': config.reflectasm_version
    }
    //from(sourceSets.main.resources.srcDirs) {
    //    exclude '*.info'
    //}
}

// Modify jar. Generate custom manifest
jar {
    from project.mixinRefMap
    classifier = 'universal'
    manifest {
        attributes (
            'FMLCorePlugin': 'myessentials.DepLoader',
            'FMLCorePluginContainsFMLMod': 'true',
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'TweakOrder': '0'
        )
    }

    // TODO Change package name to avoid conflicts?
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            include 'org/spongepowered/asm', 'org/spongepowered/asm/**'
        }
    }
}

// Setup Curse Upload task
curse {
    apiKey = System.env.CURSEFORGEKEY
    projectId = config.project_id
    changelog = "" // TODO Add changelog support
    releaseType = config.build_type.equals('a') ? "alpha" : (config.build_type.equals('b') ? "beta" : "release")
}
